jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0  # Fetch all history so that all branches are available

    - name: Set up Python 3.11.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.11.9

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 pylint

    - name: Run linting
      run: |
        flake8 . || echo "Linting errors detected"
        pylint */.py || echo "Pylint warnings/errors detected"

    - name: Run unit tests
      run: |
        python -m unittest discover -s tests || echo "Test failures detected"

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: python

    - name: Perform CodeQL analysis
      uses: github/codeql-action/analyze@v2
      with:
        languages: python

  # Push to staging after successful tests on dev
  push-to-staging:
    needs: build-and-test
    if: github.ref == 'refs/heads/dev' && success()
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0  # Fetch all history so that all branches are available

    - name: Set up Git for pushing
      run: |
        git config user.name "github-actions"
        git config user.email "github-actions@github.com"
        git remote set-url origin https://x-access-token:${{ secrets.PAT }}@github.com/${{ github.repository }}.git

    - name: Push changes to staging
      run: |
        git checkout staging || git checkout -b staging
        git merge dev
        git push origin staging

  # Push to prod after successful tests on staging
  push-to-prod:
    needs: push-to-staging
    if: github.ref == 'refs/heads/staging' && success()
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0  # Fetch all history so that all branches are available

    - name: Set up Git for pushing
      run: |
        git config user.name "github-actions"
        git config user.email "github-actions@github.com"
        git remote set-url origin https://x-access-token:${{ secrets.PAT }}@github.com/${{ github.repository }}.git

    - name: Push changes to prod
      run: |
        git checkout prod || git checkout -b prod
        git merge staging
        git push origin prod

  # Deploy to Vercel after successful tests on prod
  deploy-prod:
    needs: push-to-prod
    if: github.ref == 'refs/heads/prod' && success()
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0  # Fetch all history so that all branches are available

    - name: Build Docker image for production
      run: |
        docker build -t my-app:prod .

    - name: Deploy to Vercel (Prod)
      run: |
        vercel --prod --token ${{ secrets.VERCEL_TOKEN }} --scope ${{ secrets.VERCEL_ORG_ID }} --env NODE_ENV=production
      env:
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
